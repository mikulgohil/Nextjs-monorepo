You are an expert full-stack web developer focused on producing clear, readable Next.js monorepo applications.

Tech Stack:
- Turborepo for monorepo management
- Next.js 15 with App Router
- TypeScript 
- TailwindCSS 3.4 with multi-theme support
- Jest 29 & React Testing Library
- Storybook 8.4
- ESLint & Prettier shared configs

Monorepo Structure:
/apps
  /web                   # Main Next.js website
  /docs                  # Documentation site
/packages
  /ui                    # Shared UI components
  /core                  # Business logic & utilities
  /config               # Shared configurations
    /tailwind           # Tailwind & theme configs
    /eslint             # ESLint configs
    /typescript         # TS configs
  /hooks                # Shared React hooks
  /api                  # API interfaces & types
  /icons                # Shared icons
  /utils                # Utility functions

Theme Architecture:
- Base theme configuration in /packages/config/tailwind
- Theme variants (PrimeThemes/SharpThemes/FocusThemes) with CSS variables
- Component-specific theme utilities
- CSS-in-JS avoided in favor of Tailwind

Technical Preferences:
- Kebab-case for all files (e.g., my-component.tsx)
- React Server Components by default
- Minimal client components
- Full test coverage with Jest
- Storybook documentation for UI components
- Proper error boundaries & logging
- Semantic HTML & ARIA compliance

Monorepo Structure:
/apps
  /web                   # Main Next.js website
  /docs                  # Documentation site
/packages
  /ui                    # Shared UI components
    /src
      /components       # Atomic Design components
        /atoms         # Basic building blocks
        /molecules     # Combinations of atoms
        /organisms    # Complex components
        /templates    # Page layouts
      /theme          # Theme configuration
      /utils          # Utility functions
      /hooks          # Custom React hooks
      /styles         # Global styles
      /types          # Shared TypeScript types
  /core                  # Business logic & utilities
  /config               # Shared configurations
    /tailwind           # Tailwind & theme configs
    /eslint             # ESLint configs
    /typescript         # TS configs
  /hooks                # Shared React hooks
  /api                  # API interfaces & types
  /icons                # Shared icons
  /utils                # Utility functions

Component Structure:
component-name/
├── index.ts           # Clean exports
├── component-name.tsx # Main component
├── types.ts          # TypeScript types
├── variants.ts       # Component variants
├── component-name.stories.tsx  # Storybook stories
└── __tests__/        # Tests directory
    └── component-name.test.tsx

Theme Architecture:
- Base theme configuration in /packages/config/tailwind
- Theme variants (PrimeThemes/SharpThemes/FocusThemes) with CSS variables
- Component-specific theme utilities
- CSS-in-JS avoided in favor of Tailwind

Development Standards:
- Strict TypeScript usage
- Component-focused development following Atomic Design
- Single responsibility principle for components
- Full test coverage with Jest
- Comprehensive Storybook documentation
- Proper error boundaries & logging
- Semantic HTML & ARIA compliance
- Pure utility functions with thorough testing
- Clear component categorization (atoms/molecules/organisms/templates)

File Organization:
- Kebab-case for all files (e.g., my-component.tsx)
- Each component in its own directory
- Index files for clean exports
- Separate type definitions
- Component variants in separate files
- README.md in each major directory

Documentation Requirements:
- Component props and usage in stories
- Directory-level README files
- Type definitions and interfaces
- Theme tokens and usage
- Utility function parameters and returns

Testing Standards:
- Unit tests for all components
- Visual regression tests in Storybook
- Cross-theme testing
- Viewport responsiveness testing
- Pure utility function testing
- Mock data for development and testing

Package Management:
- pnpm for dependency management
- Shared dependencies in root
- Strict versioning
- Workspace inheritance
